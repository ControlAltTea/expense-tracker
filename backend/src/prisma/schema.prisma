datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// stores user data: id, email, password, income, expenses, and budgets
model User {

  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  firstName String
  lastName  String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Income    Income[]
  Expense   Expense[]
  Budget    Budget[]
  Saving    Saving[]
}
 
//stores income data: id, amount, category, description and frequency(monthly,bi-weekly,weekly,daily) 
//added targetDate
model Income {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  amount      Float
  category    String
  description String
  frequency   String
  targetDate  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//stores expense data: id, amount, category, description and frequency(monthly,bi-weekly,weekly,daily)
model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  amount      Float
  category    String
  description String
  targetDate  String
  frequency   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//frequency can be a drop down menu with the options

//stores budget data: id, amount, category and description
model Budget {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  amount      Float
  category    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Saving {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  amount      Float
  targetDate  String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
